package eifml.generator.context


import contextML.impl.ContextImpl
import contextML.impl.PropertyImpl
import eifml.generator.general.AbstractFileGenerator

class ContextServiceGenerator extends AbstractFileGenerator<ContextImpl> {

// Overridden Parent methods
	override protected fileContents(ContextImpl contextModel) {

		'''
			// Generated by ContextControllerGenerator
			
			// Is the central service of the Context Manager
			// It initializes the context providers and refreshes the context profiles with new data
			
			// Timer lengths can be adjusted above the constructor
			// For permanent changes please refer to the generator file "IFML2NG2/src/imfl.generator.ng2/ifml.generator...context/ContextControllerGenerator.xtend"
			
			import { Injectable, Input } from '@angular/core';
			import { Subscription } from 'rxjs/Subscription';
			import { Observable } from 'rxjs/Rx';
			import { BehaviorSubject } from 'rxjs/Rx';
			import { Profile } from './profile/profile';
			
			import { DisplayProperties } from '../helper/displayProperties'
			
			import { NoolsService } from '../services/nools.service';
			«FOR prov : contextModel.provider»
				import { «prov.id.toFirstUpper»Service } from './providers/«prov.id.toFirstLower».service';
			«ENDFOR»
			
			
			@Injectable()
			export class ContextControllerService{
				
				   private profile: Profile;
				   
				   private session: any;
				   
				   private active: boolean = true;
				   
				   private changed: boolean = false;
				   private _changedSubject: BehaviorSubject<boolean> = new BehaviorSubject(false);
				   public changedSubject: Observable<boolean> = this._changedSubject.asObservable();
				   
			
			«FOR entity : contextModel.entity»
				«FOR prop: entity.eContents»
					private «prop.eClass.name.toFirstLower»: Subscription;
				«ENDFOR»
			«ENDFOR»
			
					private timeInit: number = 0;      //initialization for the Timer
					private timeFast: number = 750;    //update Time for the Fast Update in ms
					private timeSlow: number = 8000;   //update Time for the Slow Update in ms
			
			
			constructor(
					private flow: NoolsService,
				«FOR prov : contextModel.provider SEPARATOR ","»
					private «prov.id.toFirstLower»Service: «prov.id.toFirstUpper»Service
				«ENDFOR»
			){
				
					this.profile = new Profile();
					this.flow.setProfile(this.profile);
					this.session = this.flow.getSession();
			
			«FOR entity : contextModel.entity»
				«FOR prop: entity.eContents»
					this.«prop.eClass.name.toFirstLower» = this.«(prop as PropertyImpl).provider.id»Service.«prop.eClass.name.toFirstLower»Subject.subscribe(«prop.eClass.name.toFirstLower» => {
						if(this.active){
							this.profile.get«entity.eClass.name»().set«prop.eClass.name»(«prop.eClass.name.toFirstLower»);
							this.onModified();
						}
					});
				«ENDFOR»
			«ENDFOR»
			
					//Manager checks APIs fast
					let timerFast = Observable.timer(this.timeInit,this.timeFast);
					timerFast.subscribe(t => {
						if(this.active){
								this.fast();
						}
					});
			
			}
			
			fast(){
			«FOR entity : contextModel.entity»
				«FOR prop: entity.eContents»
					
						this.«(prop as PropertyImpl).provider.id»Service.get«prop.eClass.name»();
					
				«ENDFOR»
			«ENDFOR»
			}
							
			
			
			
					   
					   //returns Profile instance
					public getProfile(){
					    return this.profile;
					}
					
					public onModified(){
					  //now fire the rules
					  this.session.assert(this.getProfile());
					  this.session.match(function(err){
					      if(err){
					        console.error(err.stack);
					      }
					  });
					  this.changed = true;
					  this._changedSubject.next(this.changed);
					}
					
					public setActivation( status ){
						this.active = status;
					}
					
					public setNotChanged(){
						this.changed = false;
					}
				}			
		'''
	}

	override protected fileName(ContextImpl adaptModel) {
		'''contextController.service.ts'''
	}

	override protected folderName(ContextImpl it) {
		'''app/context/'''
	}

}
