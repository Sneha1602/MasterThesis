// Generated by ContextProviderGenerator
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// Contains Objects that push new data to the Context Controller
// Code for API/Library access has to be inserted in the file:"deviceAPI.service.ts" 
// in the folder: static/app/context/providers/
var core_1 = require('@angular/core');
var Rx_1 = require('rxjs/Rx');
// PROTECTED REGION ID general ENABLED START
// PROTECTED REGION END
var DeviceAPIService = (function () {
    // PROTECTED REGION END
    function DeviceAPIService() {
        var _this = this;
        this._deviceTypeSubject = new Rx_1.BehaviorSubject("init");
        this.deviceTypeSubject = this._deviceTypeSubject.asObservable();
        this._languageSubject = new Rx_1.BehaviorSubject("init");
        this.languageSubject = this._languageSubject.asObservable();
        this._movementSubject = new Rx_1.BehaviorSubject(0);
        this.movementSubject = this._movementSubject.asObservable();
        // PROTECTED REGION ID deviceAPI ENABLED START
        this.acceleartionAvg = 0.5; // helper for moving average with magic starting value
        this.i = 0;
        //Here is the place where code for EventListeners is inserted (manual inserting is done in /static/app/context/providers/[providerfile])
        // PROTECTED REGION ID constructor ENABLED START
        // Updates Movement information for vertical movement
        window.addEventListener("devicemotion", function (event) {
            /*  x,y,z are the accelerations on different axis.
                All combined have a value in still position of ~13.
                This is due acceleration of gravtiy.
                If the device is shaken or moved the value rises.
            */
            var x = event.accelerationIncludingGravity.x;
            var y = event.accelerationIncludingGravity.y;
            var z = event.accelerationIncludingGravity.z;
            var w = y + z + x;
            /*  If the combined acceleration rises above a level
                a moving average is increased. All the used magic values and threshold
                are eperimental and turned out to work fine
            */
            _this.acceleartionAvg = _this.acceleartionAvg * 24;
            if (w > 14 || w < 8.5) {
                _this.acceleartionAvg += 100;
            }
            _this.acceleartionAvg = _this.acceleartionAvg / 25;
            if (_this.i == 100) {
                console.log(_this.acceleartionAvg);
                _this.i = 0;
            }
            else {
                _this.i++;
            }
            if (_this.acceleartionAvg >= 1) {
                _this.movement = 0;
            }
            else if (_this.acceleartionAvg >= 0.5) {
                _this.movement = 1;
            }
            else {
                _this.movement = 2;
            }
        });
        // PROTECTED REGION END
    }
    //Add callback functions for the properties
    DeviceAPIService.prototype.getDeviceType = function () {
        //Here can be some code for the timer be inserted (manual inserting is done in /static/app/context/providers/[providerfile])
        // PROTECTED REGION ID deviceType ENABLED START
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini|Mobile/.test(navigator.userAgent)) {
            this.deviceType = "mobile"; // for demonstration purposes
        }
        else {
            this.deviceType = "desktop";
        }
        // PROTECTED REGION END
        this._deviceTypeSubject.next(this.deviceType);
    };
    DeviceAPIService.prototype.getLanguage = function () {
        //Here can be some code for the timer be inserted (manual inserting is done in /static/app/context/providers/[providerfile])
        // PROTECTED REGION ID language ENABLED START
        switch (navigator.language) {
            case "de":
                this.language = "de";
                break;
            case "en" || "en-us":
                this.language = "en";
                break;
            case "it":
                this.language = "it";
                break;
            default: this.language = "en";
        }
        // PROTECTED REGION END
        this._languageSubject.next(this.language);
    };
    DeviceAPIService.prototype.getMovement = function () {
        //Here can be some code for the timer be inserted (manual inserting is done in /static/app/context/providers/[providerfile])
        // PROTECTED REGION ID movement ENABLED START
        // PROTECTED REGION END
        this._movementSubject.next(this.movement);
    };
    DeviceAPIService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DeviceAPIService);
    return DeviceAPIService;
}());
exports.DeviceAPIService = DeviceAPIService;
//# sourceMappingURL=deviceAPI.service.js.map