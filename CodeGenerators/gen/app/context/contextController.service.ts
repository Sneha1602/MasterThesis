// Generated by ContextControllerGenerator

// Is the central service of the Context Manager
// It initializes the context providers and refreshes the context profiles with new data

// Timer lengths can be adjusted above the constructor
// For permanent changes please refer to the generator file "IFML2NG2/src/imfl.generator.ng2/ifml.generator...context/ContextControllerGenerator.xtend"

import { Injectable, Input } from '@angular/core';
import { Subscription } from 'rxjs/Subscription';
import { Observable } from 'rxjs/Rx';
import { BehaviorSubject } from 'rxjs/Rx';
import { Profile } from './profile/profile';

import { DisplayProperties } from '../helper/displayProperties'

import { NoolsService } from '../services/nools.service';
import { AppStateService } from './providers/appState.service';
import { FaceDetectionService } from './providers/faceDetection.service';
import { DeviceAPIService } from './providers/deviceAPI.service';


@Injectable()
export class ContextControllerService{
	
	   private profile: Profile;
	   
	   private session: any;
	   
	   private active: boolean = true;
	   
	   private changed: boolean = false;
	   private _changedSubject: BehaviorSubject<boolean> = new BehaviorSubject(false);
	   public changedSubject: Observable<boolean> = this._changedSubject.asObservable();
	   

private userRole: Subscription;
private colorBlind: Subscription;
private age: Subscription;
private deviceType: Subscription;
private language: Subscription;
private movement: Subscription;

		private timeInit: number = 0;      //initialization for the Timer
		private timeFast: number = 750;    //update Time for the Fast Update in ms
		private timeSlow: number = 8000;   //update Time for the Slow Update in ms


constructor(
		private flow: NoolsService,
	private appStateService: AppStateService,
	private faceDetectionService: FaceDetectionService,
	private deviceAPIService: DeviceAPIService
){
	
		this.profile = new Profile();
		this.flow.setProfile(this.profile);
		this.session = this.flow.getSession();

this.userRole = this.appStateService.userRoleSubject.subscribe(userRole => {
	if(this.active){
		this.profile.getUser().setUserRole(userRole);
		this.onModified();
	}
});
this.colorBlind = this.appStateService.colorBlindSubject.subscribe(colorBlind => {
	if(this.active){
		this.profile.getUser().setColorBlind(colorBlind);
		this.onModified();
	}
});
this.age = this.faceDetectionService.ageSubject.subscribe(age => {
	if(this.active){
		this.profile.getUser().setAge(age);
		this.onModified();
	}
});
this.deviceType = this.deviceAPIService.deviceTypeSubject.subscribe(deviceType => {
	if(this.active){
		this.profile.getPlatform().setDeviceType(deviceType);
		this.onModified();
	}
});
this.language = this.deviceAPIService.languageSubject.subscribe(language => {
	if(this.active){
		this.profile.getPlatform().setLanguage(language);
		this.onModified();
	}
});
this.movement = this.deviceAPIService.movementSubject.subscribe(movement => {
	if(this.active){
		this.profile.getEnvironment().setMovement(movement);
		this.onModified();
	}
});

		//Manager checks APIs fast
		let timerFast = Observable.timer(this.timeInit,this.timeFast);
		timerFast.subscribe(t => {
			if(this.active){
					this.fast();
			}
		});

}

fast(){

	this.appStateService.getUserRole();


	this.appStateService.getColorBlind();


	this.faceDetectionService.getAge();


	this.deviceAPIService.getDeviceType();


	this.deviceAPIService.getLanguage();


	this.deviceAPIService.getMovement();

}
				



		   
		   //returns Profile instance
		public getProfile(){
		    return this.profile;
		}
		
		public onModified(){
		  //now fire the rules
		  this.session.assert(this.getProfile());
		  this.session.match(function(err){
		      if(err){
		        console.error(err.stack);
		      }
		  });
		  this.changed = true;
		  this._changedSubject.next(this.changed);
		}
		
		public setActivation( status ){
			this.active = status;
		}
		
		public setNotChanged(){
			this.changed = false;
		}
	}			
