/**
 */
package contextML.provider;

import contextML.util.ContextMLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ContextMLItemProviderAdapterFactory extends ContextMLAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ContextMLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Provider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProviderItemProvider providerItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Provider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProviderAdapter() {
		if (providerItemProvider == null) {
			providerItemProvider = new ProviderItemProvider(this);
		}

		return providerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Platform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformItemProvider platformItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Platform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformAdapter() {
		if (platformItemProvider == null) {
			platformItemProvider = new PlatformItemProvider(this);
		}

		return platformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Environment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentItemProvider environmentItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Environment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentAdapter() {
		if (environmentItemProvider == null) {
			environmentItemProvider = new EnvironmentItemProvider(this);
		}

		return environmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Age} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgeItemProvider ageItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Age}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgeAdapter() {
		if (ageItemProvider == null) {
			ageItemProvider = new AgeItemProvider(this);
		}

		return ageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.UserRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserRoleItemProvider userRoleItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.UserRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserRoleAdapter() {
		if (userRoleItemProvider == null) {
			userRoleItemProvider = new UserRoleItemProvider(this);
		}

		return userRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.ColorBlind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorBlindItemProvider colorBlindItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.ColorBlind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorBlindAdapter() {
		if (colorBlindItemProvider == null) {
			colorBlindItemProvider = new ColorBlindItemProvider(this);
		}

		return colorBlindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.DeviceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceTypeItemProvider deviceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.DeviceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceTypeAdapter() {
		if (deviceTypeItemProvider == null) {
			deviceTypeItemProvider = new DeviceTypeItemProvider(this);
		}

		return deviceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Mobile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobileItemProvider mobileItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Mobile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobileAdapter() {
		if (mobileItemProvider == null) {
			mobileItemProvider = new MobileItemProvider(this);
		}

		return mobileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Desktop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DesktopItemProvider desktopItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Desktop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDesktopAdapter() {
		if (desktopItemProvider == null) {
			desktopItemProvider = new DesktopItemProvider(this);
		}

		return desktopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Language} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LanguageItemProvider languageItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Language}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLanguageAdapter() {
		if (languageItemProvider == null) {
			languageItemProvider = new LanguageItemProvider(this);
		}

		return languageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.German} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GermanItemProvider germanItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.German}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGermanAdapter() {
		if (germanItemProvider == null) {
			germanItemProvider = new GermanItemProvider(this);
		}

		return germanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.English} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnglishItemProvider englishItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.English}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnglishAdapter() {
		if (englishItemProvider == null) {
			englishItemProvider = new EnglishItemProvider(this);
		}

		return englishItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Movement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MovementItemProvider movementItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Movement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMovementAdapter() {
		if (movementItemProvider == null) {
			movementItemProvider = new MovementItemProvider(this);
		}

		return movementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.HighMovement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HighMovementItemProvider highMovementItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.HighMovement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHighMovementAdapter() {
		if (highMovementItemProvider == null) {
			highMovementItemProvider = new HighMovementItemProvider(this);
		}

		return highMovementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.LowMovement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LowMovementItemProvider lowMovementItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.LowMovement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLowMovementAdapter() {
		if (lowMovementItemProvider == null) {
			lowMovementItemProvider = new LowMovementItemProvider(this);
		}

		return lowMovementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.UserIsYoung} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserIsYoungItemProvider userIsYoungItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.UserIsYoung}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserIsYoungAdapter() {
		if (userIsYoungItemProvider == null) {
			userIsYoungItemProvider = new UserIsYoungItemProvider(this);
		}

		return userIsYoungItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.UserIsOld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserIsOldItemProvider userIsOldItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.UserIsOld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserIsOldAdapter() {
		if (userIsOldItemProvider == null) {
			userIsOldItemProvider = new UserIsOldItemProvider(this);
		}

		return userIsOldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Admin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdminItemProvider adminItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Admin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdminAdapter() {
		if (adminItemProvider == null) {
			adminItemProvider = new AdminItemProvider(this);
		}

		return adminItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.Student} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StudentItemProvider studentItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.Student}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStudentAdapter() {
		if (studentItemProvider == null) {
			studentItemProvider = new StudentItemProvider(this);
		}

		return studentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.UserIsColorBlind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserIsColorBlindItemProvider userIsColorBlindItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.UserIsColorBlind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserIsColorBlindAdapter() {
		if (userIsColorBlindItemProvider == null) {
			userIsColorBlindItemProvider = new UserIsColorBlindItemProvider(this);
		}

		return userIsColorBlindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link contextML.UserIsNotColorBlind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserIsNotColorBlindItemProvider userIsNotColorBlindItemProvider;

	/**
	 * This creates an adapter for a {@link contextML.UserIsNotColorBlind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserIsNotColorBlindAdapter() {
		if (userIsNotColorBlindItemProvider == null) {
			userIsNotColorBlindItemProvider = new UserIsNotColorBlindItemProvider(this);
		}

		return userIsNotColorBlindItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (contextItemProvider != null)
			contextItemProvider.dispose();
		if (ageItemProvider != null)
			ageItemProvider.dispose();
		if (providerItemProvider != null)
			providerItemProvider.dispose();
		if (userItemProvider != null)
			userItemProvider.dispose();
		if (platformItemProvider != null)
			platformItemProvider.dispose();
		if (environmentItemProvider != null)
			environmentItemProvider.dispose();
		if (userRoleItemProvider != null)
			userRoleItemProvider.dispose();
		if (adminItemProvider != null)
			adminItemProvider.dispose();
		if (studentItemProvider != null)
			studentItemProvider.dispose();
		if (colorBlindItemProvider != null)
			colorBlindItemProvider.dispose();
		if (userIsNotColorBlindItemProvider != null)
			userIsNotColorBlindItemProvider.dispose();
		if (userIsColorBlindItemProvider != null)
			userIsColorBlindItemProvider.dispose();
		if (userIsYoungItemProvider != null)
			userIsYoungItemProvider.dispose();
		if (userIsOldItemProvider != null)
			userIsOldItemProvider.dispose();
		if (deviceTypeItemProvider != null)
			deviceTypeItemProvider.dispose();
		if (mobileItemProvider != null)
			mobileItemProvider.dispose();
		if (desktopItemProvider != null)
			desktopItemProvider.dispose();
		if (languageItemProvider != null)
			languageItemProvider.dispose();
		if (germanItemProvider != null)
			germanItemProvider.dispose();
		if (englishItemProvider != null)
			englishItemProvider.dispose();
		if (movementItemProvider != null)
			movementItemProvider.dispose();
		if (highMovementItemProvider != null)
			highMovementItemProvider.dispose();
		if (lowMovementItemProvider != null)
			lowMovementItemProvider.dispose();
	}

}
